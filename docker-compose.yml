
services:
  web:
    build: ./app
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py init_categories &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      - db
      - minio
      - minio-init
      - ocr

  test_runner:
    build: ./app
    command: >
      sh -c "
        pytest expenses
      "
    volumes:
      - ./app:/app
    env_file: .env 
    environment:
    - DJANGO_SETTINGS_MODULE=accounting.settings
    depends_on:
    - db

  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      sh -c "
        until mc alias set local http://minio:9000 minioadmin minioadmin; do
          echo '‚è≥ waiting for MinIO...';
          sleep 2;
        done;
        mc mb --ignore-existing local/$${AWS_STORAGE_BUCKET_NAME:-my-bucket};
      "
    environment:
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME:-my-bucket}

  ocr:
    build: ./ocr_service
    ports:
      - "5001:5000"
    environment:
      - LANG=fr_FR.UTF-8
      
volumes:
  postgres_data:
  minio_data: